// Реализовать zipWith
// zipWith принимает функцию и два массива и архивирует массивы вместе, применяя функцию к каждой паре значений.
// Значение функции представляет собой один новый массив.

// Если массивы имеют неодинаковую длину, выходные данные будут иметь только ту длину, которая короче.
// (значения более длинного массива просто не используются.)

// Входные данные не должны быть изменены.

// Примеры
// zipWith( Math.pow, [10,10,10,10], [0,1,2,3] )      =>  [1,10,100,1000]
// zipWith( Math.max, [1,4,7,1,4,7], [4,7,1,4,7,1] )  =>  [4,7,7,4,7,7]

// zipWith( function(a,b) { return a+b; }, [0,1,2,3], [0,1,2,3] )  =>  [0,2,4,6]  Both forms are valid.
// zipWith( (a,b) => a+b,                  [0,1,2,3], [0,1,2,3] )  =>  [0,2,4,6]  Both are functions.
// Проверка ввода
// Предположим, что все входные данные действительны.



function zipWith(fn,a0,a1) {
    let arr = [a0, a1];
     return arr. reduce((resArr, elem, index) => {
          for(let i =0 ; i< Math.min(a0.length, a1.length); i++){
              resArr[i] = fn(a0[i], a1[i])
          }
          return resArr
      },[]).filter( num =>  num || num == 0)
     }


   console.log(zipWith(plus, [1,2,3,4,5], [6,5,4,3,2,1]) )